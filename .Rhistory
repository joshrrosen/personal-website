---
title: "HNDC"
# Load required package
library(igraph)
# Parameters
num_parents <- 2  # Number of parent nodes (top level)
num_layers <- 4   # Number of layers
nodes_per_layer <- c(3, 5, 10, 15)  # Number of nodes in each layer
diffusion_rate <- .5  # Diffusion rate (fraction of connections between layers)
# Create a list to hold nodes per layer
layers <- list()
# Initialize the parent layer
layers[[1]] <- 1:num_parents
# Simulate nodes and edges across layers
g <- graph.empty(directed = TRUE)
# Add parent nodes to the graph
g <- add_vertices(g, num_parents, name = as.character(layers[[1]]))
# Loop through each layer and create nodes/edges based on diffusion rate
for (i in 2:num_layers) {
# Generate nodes for this layer
current_layer <- max(layers[[i - 1]]) + 1:max(nodes_per_layer[i - 1])
layers[[i]] <- current_layer
g <- add_vertices(g, length(current_layer), name = as.character(current_layer))
# Add edges between layers based on diffusion rate
for (node in current_layer) {
# Sample parent nodes based on diffusion rate
num_parents_to_connect <- round(diffusion_rate * length(layers[[i - 1]]))
parent_nodes <- sample(layers[[i - 1]], size = num_parents_to_connect, replace = FALSE)
for (parent in parent_nodes) {
g <- add_edges(g, c(as.character(parent), as.character(node)))
}
}
}
# Plot the resulting hierarchical network
plot(g, layout = layout_as_tree(g, flip.y = TRUE), vertex.label = V(g)$name)
# Analyze some network properties
cat("Average path length:", average.path.length(g), "\n")
cat("Clustering coefficient:", transitivity(g), "\n")
cat("Density:", edge_density(g), "\n")
# Load required packages
library(igraph)
library(ggplot2)
# Parameters
num_parents <- 2  # Number of parent nodes (top level)
num_layers <- 4   # Number of layers
nodes_per_layer <- c(3, 5, 10, 15)  # Number of nodes in each layer
diffusion_rates <- seq(0.1, 1, by = 0.1)  # Range of diffusion rates for inter-layer connections
intra_layer_probs <- seq(0, 0.5, by = 0.1)  # Probabilities for intra-layer connections
# Initialize a data frame to store results
results <- data.frame(diffusion_rate = numeric(),
intra_layer_prob = numeric(),
avg_path_length = numeric(),
clustering_coeff = numeric(),
density = numeric())
# Loop over different diffusion rates and intra-layer probabilities
for (diffusion_rate in diffusion_rates) {
for (intra_prob in intra_layer_probs) {
# Create a list to hold nodes per layer
layers <- list()
# Initialize the parent layer
layers[[1]] <- 1:num_parents
# Initialize an empty directed graph
g <- graph.empty(directed = TRUE)
# Add parent nodes to the graph
g <- add_vertices(g, num_parents, name = as.character(layers[[1]]))
node_counter <- num_parents  # Keep track of node numbering
# Loop through each layer and create nodes/edges
for (i in 2:(num_layers + 1)) {
# Generate nodes for this layer
num_nodes_current_layer <- nodes_per_layer[i - 1]
current_layer <- (node_counter + 1):(node_counter + num_nodes_current_layer)
node_counter <- node_counter + num_nodes_current_layer
layers[[i]] <- current_layer
g <- add_vertices(g, length(current_layer), name = as.character(current_layer))
# Add inter-layer edges based on diffusion rate
for (node in current_layer) {
# Number of parent nodes to connect
num_parents_to_connect <- max(1, round(diffusion_rate * length(layers[[i - 1]])))
parent_nodes <- sample(layers[[i - 1]], size = num_parents_to_connect, replace = FALSE)
for (parent in parent_nodes) {
g <- add_edges(g, c(as.character(parent), as.character(node)))
}
}
# Add intra-layer edges based on intra-layer probability
if (length(current_layer) > 1 && intra_prob > 0) {
# Possible pairs of nodes within the current layer
intra_layer_edges <- combn(current_layer, 2)
# Determine which edges to add
num_possible_intra_edges <- ncol(intra_layer_edges)
edges_to_add <- intra_layer_edges[, runif(num_possible_intra_edges) < intra_prob]
if (length(edges_to_add) > 0) {
# Add directed intra-layer edges
g <- add_edges(g, as.character(as.vector(edges_to_add)))
}
}
}
# Calculate network properties
avg_path_length <- if (vcount(g) > 1) average.path.length(g, directed = TRUE) else NA
clustering_coeff <- transitivity(g, type = "global")
density <- edge_density(g, loops = FALSE)
# Store the results
results <- rbind(results, data.frame(diffusion_rate = diffusion_rate,
intra_layer_prob = intra_prob,
avg_path_length = avg_path_length,
clustering_coeff = clustering_coeff,
density = density))
}
}
# Plot the results
# Load additional packages for plotting
library(reshape2)
library(dplyr)
# Plot Density vs. Diffusion Rate for different Intra-Layer Probabilities
ggplot(results, aes(x = diffusion_rate, y = density, color = as.factor(intra_layer_prob))) +
geom_line() +
geom_point() +
labs(title = "Density vs. Diffusion Rate",
x = "Diffusion Rate",
y = "Density",
color = "Intra-Layer Probability")
# Plot Density vs. Intra-Layer Probability for different Diffusion Rates
ggplot(results, aes(x = intra_layer_prob, y = density, color = as.factor(diffusion_rate))) +
geom_line() +
geom_point() +
labs(title = "Density vs. Intra-Layer Probability",
x = "Intra-Layer Probability",
y = "Density",
color = "Diffusion Rate")
# Print the results data frame
print(results)
# Load required package
library(igraph)
# Parameters
num_parents <- 2  # Number of parent nodes (top level)
num_layers <- 4   # Number of layers
nodes_per_layer <- c(3, 5, 10, 15)  # Number of nodes in each layer
diffusion_rate <- .5  # Diffusion rate (fraction of connections between layers)
# Create a list to hold nodes per layer
layers <- list()
# Initialize the parent layer
layers[[1]] <- 1:num_parents
# Simulate nodes and edges across layers
g <- graph.empty(directed = TRUE)
# Add parent nodes to the graph
g <- add_vertices(g, num_parents, name = as.character(layers[[1]]))
# Loop through each layer and create nodes/edges based on diffusion rate
for (i in 2:num_layers) {
# Generate nodes for this layer
current_layer <- max(layers[[i - 1]]) + 1:max(nodes_per_layer[i - 1])
layers[[i]] <- current_layer
g <- add_vertices(g, length(current_layer), name = as.character(current_layer))
# Add edges between layers based on diffusion rate
for (node in current_layer) {
# Sample parent nodes based on diffusion rate
num_parents_to_connect <- round(diffusion_rate * length(layers[[i - 1]]))
parent_nodes <- sample(layers[[i - 1]], size = num_parents_to_connect, replace = FALSE)
for (parent in parent_nodes) {
g <- add_edges(g, c(as.character(parent), as.character(node)))
}
}
}
# Plot the resulting hierarchical network
plot(g, layout = layout_as_tree(g, flip.y = TRUE), vertex.label = V(g)$name)
# Analyze some network properties
cat("Average path length:", average.path.length(g), "\n")
cat("Clustering coefficient:", transitivity(g), "\n")
cat("Density:", edge_density(g), "\n")
